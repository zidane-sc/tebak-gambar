/*! react-responsive-canvas v1.0.2 | (c) 2018 Ross Zurowski | MIT License | https://github.com/rosszurowski/react-responsive-canvas !*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global['react-responsive-canvas'] = factory(global.React));
}(this, (function (React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  var parseNumber = function parseNumber(prop) {
    return parseFloat(prop) || 0;
  };

  var getSize = function getSize(el) {
    if (el === window || el === document.body) {
      return [window.innerWidth, window.innerHeight];
    }

    var temporary = false;

    if (!el.parentNode && document.body) {
      temporary = true;
      document.body.appendChild(el);
    }

    var rect = el.getBoundingClientRect();
    var styles = getComputedStyle(el);
    var height = (rect.height | 0) + parseNumber(styles.getPropertyValue('margin-top')) + parseNumber(styles.getPropertyValue('margin-bottom'));
    var width = (rect.width | 0) + parseNumber(styles.getPropertyValue('margin-left')) + parseNumber(styles.getPropertyValue('margin-right'));

    if (temporary && document.body) {
      document.body.removeChild(el);
    }

    return [width, height];
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var ResponsiveCanvas = function (_Component) {
    inherits(ResponsiveCanvas, _Component);

    function ResponsiveCanvas() {
      var _temp, _this, _ret;

      classCallCheck(this, ResponsiveCanvas);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
        width: 0,
        height: 0
      }, _this.handleResize = function () {
        _this.setSize();
        _this.props.onResize();
      }, _this.setSize = function () {
        var parent = _this.$canvas.parentElement;

        if (!parent) {
          return;
        }

        var _getSize = getSize(parent),
            width = _getSize[0],
            height = _getSize[1];

        _this.setState({ width: width, height: height });
      }, _this.setRef = function (el) {
        if (!el) {
          return;
        }

        var canvasRef = _this.props.canvasRef;


        _this.$canvas = el;
        if (typeof canvasRef === 'function') {
          canvasRef(el);
        }
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    ResponsiveCanvas.prototype.componentDidMount = function componentDidMount() {
      window.addEventListener('resize', this.handleResize, false);
      this.setSize();
    };

    ResponsiveCanvas.prototype.componentWillUnmount = function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize, false);
    };

    ResponsiveCanvas.prototype.render = function render() {
      var _props = this.props,
          scale = _props.scale,
          onResize = _props.onResize,
          canvasRef = _props.canvasRef,
          props = objectWithoutProperties(_props, ['scale', 'onResize', 'canvasRef']);
      var _state = this.state,
          width = _state.width,
          height = _state.height;


      return React__default.createElement('canvas', _extends({}, props, {
        ref: this.setRef,
        width: width * scale,
        height: height * scale,
        style: { width: width, height: height }
      }));
    };

    return ResponsiveCanvas;
  }(React.Component);

  ResponsiveCanvas.defaultProps = {
    scale: typeof window !== 'undefined' ? window.devicePixelRatio : 1
  };

  return ResponsiveCanvas;

})));
