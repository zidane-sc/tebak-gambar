{"ast":null,"code":"module.exports = function (haystack, needle, comparator, low, high) {\n  var mid, cmp;\n  if (low === undefined) low = 0;else {\n    low = low | 0;\n    if (low < 0 || low >= haystack.length) throw new RangeError(\"invalid lower bound\");\n  }\n  if (high === undefined) high = haystack.length - 1;else {\n    high = high | 0;\n    if (high < low || high >= haystack.length) throw new RangeError(\"invalid upper bound\");\n  }\n\n  while (low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + (high - low >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack); // Too low.\n\n    if (cmp < 0.0) low = mid + 1; // Too high.\n    else if (cmp > 0.0) high = mid - 1; // Key found.\n      else return mid;\n  } // Key not found.\n\n\n  return ~low;\n};","map":{"version":3,"sources":["D:/Study/Coding/node-js/tebak-gambar/ui/node_modules/binary-search/index.js"],"names":["module","exports","haystack","needle","comparator","low","high","mid","cmp","undefined","length","RangeError"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4CC,IAA5C,EAAkD;AACjE,MAAIC,GAAJ,EAASC,GAAT;AAEA,MAAGH,GAAG,KAAKI,SAAX,EACEJ,GAAG,GAAG,CAAN,CADF,KAGK;AACHA,IAAAA,GAAG,GAAGA,GAAG,GAAC,CAAV;AACA,QAAGA,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAIH,QAAQ,CAACQ,MAA9B,EACE,MAAM,IAAIC,UAAJ,CAAe,qBAAf,CAAN;AACH;AAED,MAAGL,IAAI,KAAKG,SAAZ,EACEH,IAAI,GAAGJ,QAAQ,CAACQ,MAAT,GAAkB,CAAzB,CADF,KAGK;AACHJ,IAAAA,IAAI,GAAGA,IAAI,GAAC,CAAZ;AACA,QAAGA,IAAI,GAAGD,GAAP,IAAcC,IAAI,IAAIJ,QAAQ,CAACQ,MAAlC,EACE,MAAM,IAAIC,UAAJ,CAAe,qBAAf,CAAN;AACH;;AAED,SAAMN,GAAG,IAAIC,IAAb,EAAmB;AACjB;AACA;AACA;AACA;AACAC,IAAAA,GAAG,GAAGF,GAAG,IAAKC,IAAI,GAAGD,GAAR,KAAiB,CAArB,CAAT;AACAG,IAAAA,GAAG,GAAG,CAACJ,UAAU,CAACF,QAAQ,CAACK,GAAD,CAAT,EAAgBJ,MAAhB,EAAwBI,GAAxB,EAA6BL,QAA7B,CAAjB,CANiB,CAQjB;;AACA,QAAGM,GAAG,GAAG,GAAT,EACEH,GAAG,GAAIE,GAAG,GAAG,CAAb,CADF,CAGA;AAHA,SAIK,IAAGC,GAAG,GAAG,GAAT,EACHF,IAAI,GAAGC,GAAG,GAAG,CAAb,CADG,CAGL;AAHK,WAKH,OAAOA,GAAP;AACH,GAxCgE,CA0CjE;;;AACA,SAAO,CAACF,GAAR;AACD,CA5CD","sourcesContent":["module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n"]},"metadata":{},"sourceType":"script"}